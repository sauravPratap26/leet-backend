// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ClubRole {
  TEACHER
  STUDENT
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Acceptance {
  ACCEPTED
  REJECTED
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String?

  problems      Problem[]
  submissions   Submission[]
  problemSolved ProblemSolved[]
  playLists     Playlist[]
  banned        Boolean         @default(false)
  avatar        String          @default("girl1.png")
  tags          Tag[]           @relation("UserTags")
  linkedin      String?
  twitter       String?
  github        String?
  canCreateClub Boolean         @default(false)

  ClubMember ClubMember[]
}

model Problem {
  id                    String              @id @default(uuid())
  title                 String
  description           String
  difficulty            Difficulty
  oldTags               String[]
  tags                  Tag[]               @relation("ProblemTags")
  userId                String
  examples              Json
  constraints           String
  hints                 String?
  editorial             String?
  testcases             Json
  codeSnippets          Json
  languageSolutionArray String[]            @default([])
  referenceSolutions    Json                @map("referenceSolution")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission            Submission[]
  solvedBy              ProblemSolved[]
  problemsPlaylists     ProblemInPlaylist[]

  clubId String? // null if global problem
  club   Club?   @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String    @id @default(uuid())
  value     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  problems  Problem[] @relation("ProblemTags")
  users     User[]    @relation("UserTags")
}

model Submission {
  id            String     @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        Acceptance
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
  clubId    String?
  club      Club?            @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model TestCaseResult {
  id            String     @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        Acceptance
  memory        String?
  time          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Problem   Problem  @relation(fields: [problemId], references: [id])

  @@unique([userId, problemId])
}

model Playlist {
  id          String              @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  problems    ProblemInPlaylist[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  clubId      String?
  club        Club?               @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}

model Club {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String   @unique // Unique join code for members
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  members    ClubMember[]
  problems   Problem[] // problems created under this club
  playlists  Playlist[] // playlists under this club
  Submission Submission[]
}

model ClubMember {
  id       String    @id @default(uuid())
  clubId   String
  userId   String
  role     ClubRole  @default(STUDENT)
  banned   Boolean   @default(false)
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clubId, userId])
}
